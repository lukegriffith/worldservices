// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: world.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorldServiceClient is the client API for WorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldServiceClient interface {
	// Creates a new world object in the server
	CreateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*WorldResponse, error)
	// Sets a singletons value to the selected world
	SelectWorld(ctx context.Context, in *WorldSelectionRequest, opts ...grpc.CallOption) (*WorldResponse, error)
	// Returns a list of all created worlds
	// If an ID is provided, it returns a single world
	GetWorld(ctx context.Context, in *WorldRequest, opts ...grpc.CallOption) (*WorldResponse, error)
}

type worldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldServiceClient(cc grpc.ClientConnInterface) WorldServiceClient {
	return &worldServiceClient{cc}
}

func (c *worldServiceClient) CreateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*WorldResponse, error) {
	out := new(WorldResponse)
	err := c.cc.Invoke(ctx, "/WorldService/CreateWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) SelectWorld(ctx context.Context, in *WorldSelectionRequest, opts ...grpc.CallOption) (*WorldResponse, error) {
	out := new(WorldResponse)
	err := c.cc.Invoke(ctx, "/WorldService/SelectWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldServiceClient) GetWorld(ctx context.Context, in *WorldRequest, opts ...grpc.CallOption) (*WorldResponse, error) {
	out := new(WorldResponse)
	err := c.cc.Invoke(ctx, "/WorldService/GetWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldServiceServer is the server API for WorldService service.
// All implementations must embed UnimplementedWorldServiceServer
// for forward compatibility
type WorldServiceServer interface {
	// Creates a new world object in the server
	CreateWorld(context.Context, *World) (*WorldResponse, error)
	// Sets a singletons value to the selected world
	SelectWorld(context.Context, *WorldSelectionRequest) (*WorldResponse, error)
	// Returns a list of all created worlds
	// If an ID is provided, it returns a single world
	GetWorld(context.Context, *WorldRequest) (*WorldResponse, error)
	mustEmbedUnimplementedWorldServiceServer()
}

// UnimplementedWorldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorldServiceServer struct {
}

func (UnimplementedWorldServiceServer) CreateWorld(context.Context, *World) (*WorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedWorldServiceServer) SelectWorld(context.Context, *WorldSelectionRequest) (*WorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectWorld not implemented")
}
func (UnimplementedWorldServiceServer) GetWorld(context.Context, *WorldRequest) (*WorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedWorldServiceServer) mustEmbedUnimplementedWorldServiceServer() {}

// UnsafeWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldServiceServer will
// result in compilation errors.
type UnsafeWorldServiceServer interface {
	mustEmbedUnimplementedWorldServiceServer()
}

func RegisterWorldServiceServer(s grpc.ServiceRegistrar, srv WorldServiceServer) {
	s.RegisterService(&WorldService_ServiceDesc, srv)
}

func _WorldService_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorldService/CreateWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).CreateWorld(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_SelectWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorldSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).SelectWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorldService/SelectWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).SelectWorld(ctx, req.(*WorldSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldService_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServiceServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorldService/GetWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServiceServer).GetWorld(ctx, req.(*WorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldService_ServiceDesc is the grpc.ServiceDesc for WorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorldService",
	HandlerType: (*WorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorld",
			Handler:    _WorldService_CreateWorld_Handler,
		},
		{
			MethodName: "SelectWorld",
			Handler:    _WorldService_SelectWorld_Handler,
		},
		{
			MethodName: "GetWorld",
			Handler:    _WorldService_GetWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "world.proto",
}
